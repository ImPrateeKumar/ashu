package com.ntt.spring.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.omg.CORBA.Request;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ntt.bo.CommonBo;
import com.tmk.hibernate.annotations.BrokerEntity;
import com.tmk.hibernate.annotations.BrokerGroup;
import com.tmk.hibernate.constants.CommonConstants;
import com.tmk.hibernate.dao.BrokerDao;
import com.tmk.hibernate.daoimpl.BrokerDaoImpl;

@Controller
@RequestMapping("/adding")
public class Adding1 {

	// private static final long serialVersionUID = 1L;
	@Autowired
	private BrokerDao brokerDAO;
	// BrokerDao brokerDAO = new BrokerDaoImpl();
	@Autowired
	private BrokerDaoImpl brokerEntityDaoImpl;
	// BrokerDaoImpl brokerEntityDaoImpl = new BrokerDaoImpl();

	// Method for retrieving data from database
	@GetMapping("/getBroker")
	public String getBroker(HttpServletRequest request,@RequestParam("location")String brokerLocation,@RequestParam("brokerName")String brokerEntityName) throws IOException{
		ModelMap map = new ModelMap();
		
		//When parameter is showbroker, retrieve all values filtered by user input
			
			//Retrieve user-input value from JSP page
			//String brokerLocation = brokerGroup.getParameter("location");
			//String brokerEntityName = ent.getParameter("brokerName");
			
			List<BrokerGroup> brokerEntitiesList = new ArrayList<BrokerGroup>();
			
			if(!StringUtils.isEmpty(brokerLocation) && !StringUtils.isEmpty(brokerEntityName)) {
			brokerEntitiesList = brokerDAO.getBrokers(brokerEntityName, brokerLocation);
			}
			
			String brokerURLFirstPart = brokerEntityDaoImpl.getFirstURLPropertyValue();
			String brokerURLSecondPart = brokerEntityDaoImpl.getSecondPropertyValue();
			
			//Set attributes of variable that will be forwarded to the JSP pages
			
			if(!CollectionUtils.isEmpty(brokerEntitiesList) && !StringUtils.isEmpty(brokerLocation) && !StringUtils.isEmpty(brokerEntityName) && !StringUtils.isEmpty(brokerURLFirstPart) && !StringUtils.isEmpty(brokerURLSecondPart)) {
			map.addAttribute("brokerEntitiesList", brokerEntitiesList);
			map.addAttribute("brokerEntityName", brokerEntityName);
			map.addAttribute("brokerLocation", brokerLocation);
			map.addAttribute("brokerURLFirstPart", brokerURLFirstPart);
			map.addAttribute("brokerURLSecondPart", brokerURLSecondPart);
			}
			HttpSession session = request.getSession();
			session.setAttribute("searchEntityName", brokerEntityName);
			session.setAttribute("searchLocation", brokerLocation);
			return "SearchBroker";
			}

	// method for saving data to the database

	@PostMapping("/postBroker")
	public String postBroker(@RequestBody CommonBo commonBo,HttpServletRequest request,HttpServletResponse response) throws Exception{
		ModelMap map = new ModelMap();
		boolean status = false;

		if(commonBo == null) {
			
			throw new Exception("fields cannot be empty");
			
		}
		//Using the current session to retrieve results of user's previous search,
		//when going back to the Search page
		
		if(!StringUtils.isEmpty(commonBo.getShowBrokerPage())){
			
			String brokerLocation = (String) request.getSession().getAttribute(commonBo.getSearchLocation());
			String brokerEntityName = (String) request.getSession().getAttribute(commonBo.getSearchEntityName());
			
			List<BrokerGroup> brokerEntitiesList = null;
			brokerEntitiesList = brokerDAO.getBrokers(brokerEntityName, brokerLocation);
			
			String brokerURLFirstPart = brokerEntityDaoImpl.getFirstURLPropertyValue();
			String brokerURLSecondPart = brokerEntityDaoImpl.getSecondPropertyValue();
			
			/*
			 * request.setAttribute("brokerEntitiesList", brokerEntitiesList);
			 * request.setAttribute("brokerEntityName", brokerEntityName);
			 * request.setAttribute("brokerLocation", brokerLocation);
			 * request.setAttribute("brokerURLFirstPart", brokerURLFirstPart);
			 * request.setAttribute("brokerURLSecondPart", brokerURLSecondPart);
			 */
					
					map.addAttribute("brokerEntitiesList", brokerEntitiesList);
					map.addAttribute("brokerEntityName", brokerEntityName);
					map.addAttribute("brokerLocation", brokerLocation);
					map.addAttribute("brokerURLFirstPart", brokerURLFirstPart);
					map.addAttribute("brokerURLSecondPart", brokerURLSecondPart);
			
			/*
			 * RequestDispatcher rd = request.getRequestDispatcher("SearchBroker.jsp");
			 * rd.forward(request, response);
			 */
					
					return "SearchBroker";
		}
		
		//when parameter is addBroker, save user input details to the database
		if(!StringUtils.isEmpty(commonBo.getAddBroker())){
			
			/*
			 * String ruleBookTeamName = request.getParameter("rulebookTeamName"); String
			 * brokerName = request.getParameter("brokerName"); String location =
			 * request.getParameter("brokerlocation"); String brokerType =
			 * request.getParameter("btype");
			 */
			
			String message = brokerDAO.addBroker(commonBo.getRulebookTeamName(), commonBo.getBrokerName(), commonBo.getBrokerlocation(), commonBo.getBtype());
			String url = "";
			
			String brokerURLFirstPart = brokerEntityDaoImpl.getFirstURLPropertyValue();
			String brokerURLSecondPart = brokerEntityDaoImpl.getSecondPropertyValue();
			
			if (message == CommonConstants.NEW_BROKER_ADDED_MESSAGE){
				url = "URL:" + brokerURLFirstPart + commonBo.getBrokerName() + brokerURLSecondPart + commonBo.getBrokerlocation();
			}
			else{
				url = "";
			}
			
			status = true;
			
			request.setAttribute("status", status);
			request.setAttribute("message", message);
			request.setAttribute("url", url);
			
			/*
			 * RequestDispatcher rd = request.getRequestDispatcher("AddBroker.jsp");
			 * rd.forward(request, response);
			 */
			return "AddBroker";
		}
		
		//when parameter is updateBroker, check if the entered broker currently exists
		//update exists broker with user-input details
		if(!StringUtils.isEmpty(commonBo.getUpdateBroker())){
			
			if(commonBo.getBrokerlocation2() == ""){
				/*
				 * String ruleBookTeamName = request.getParameter("rulebookTeamName"); String
				 * brokerName = request.getParameter("brokerName"); String location =
				 * request.getParameter("brokerLocation"); String brokerType =
				 * request.getParameter("btype"); Integer brokerEntityId =
				 * Integer.parseInt(request.getParameter("brokerEntityId")); Integer
				 * brokerGroupId = Integer.parseInt(request.getParameter("brokerGroupId"));
				 * String ruleBookTeamNameTracker =
				 * request.getParameter("ruleBookTeamNameTracker");
				 */
				
				//Form message string using update method
				String message = brokerDAO.updateBroker(commonBo.getRulebookTeamName(), commonBo.getBrokerName(), commonBo.getBrokerLocation(), commonBo.getBtype(),
						commonBo.getBrokerEntityId(), commonBo.getBrokerGroupId(), commonBo.getRuleBookTeamNameTracker());
				request.setAttribute("message", message);
			}
			
			//Otherwise add  new location to an existing broker record
			else{
				/*
				 * String ruleBookTeamName = request.getParameter("rulebookTeamName"); String
				 * brokerType = request.getParameter("btype"); Integer brokerEntityId =
				 * Integer.parseInt(request.getParameter("brokerEntityId")); String newLocation
				 * = request.getParameter("brokerlocation2");
				 */
				
				String message2 = brokerDAO.addBrokerLocation(commonBo.getRulebookTeamName(), commonBo.getBtype(), commonBo.getBrokerEntityId(),
						commonBo.getBrokerlocation2());
				request.setAttribute("message2", message2);
			}
			/*
			 * RequestDispatcher rd = request.getRequestDispatcher("EditBroker.jsp");
			 * rd.forward(request, response);
			 */
			
			return "EditBroker";
		}
		return "";
	}
}
